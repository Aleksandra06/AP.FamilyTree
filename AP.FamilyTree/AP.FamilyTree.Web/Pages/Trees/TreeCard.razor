@using AP.FamilyTree.Web.PageModels.Trees
@inject NavigationManager UriHelper

@if (Model != null)
{
    <div style="border: 4px double black; text-align: center;">
        <h6>@Model.Name</h6>
        <h6>@Model.DateString</h6>
        <div class="row" style="text-align: center;">
            @if (Model.IsRefreshed)
            {
                <i class="btn glyphicon glyphicon-refresh" @onclick="@(() => ReloadItem.InvokeAsync(Model))"></i>
            }
            else
            {
                <i class="btn glyphicon glyphicon-eye-open" @onclick="@Open"></i>
                @if (Model.Edit)
                {
                    <i class="btn glyphicon glyphicon-edit" @onclick="@(() => Change.InvokeAsync(Model))"></i>
                }
                @if (Model.Admin)
                {
                    <i class="btn glyphicon glyphicon-remove" @onclick="@(() => OpenRemoveDialog())"></i>
                }
            }
        </div>
    </div>
}

<ConfirmationDialog IsOpenConfirmation="@mIsOpenConfirmationDialog" Answer="@CloseRemoveDialog" />

@code {
    [Parameter] public TreeCardItemViewModel Model { get; set; }
    [Parameter] public EventCallback<TreeCardItemViewModel> Change { get; set; }
    [Parameter] public EventCallback<TreeCardItemViewModel> Remove { get; set; }
    [Parameter] public EventCallback<TreeCardItemViewModel> ReloadItem { get; set; }

    private bool mIsOpenConfirmationDialog = false;

    //protected override async Task OnParametersSetAsync()
    //{

    //}

    private void OpenRemoveDialog()
    {
        mIsOpenConfirmationDialog = true;
    }

    protected void CloseRemoveDialog(bool answer)
    {
        mIsOpenConfirmationDialog = false;
        if (answer)
        {
            Remove.InvokeAsync(Model);
        }
    }

    private void Open()
    {
        UriHelper.NavigateTo(UriHelper.BaseUri + $"tree/{Model.Id}");
    }
}
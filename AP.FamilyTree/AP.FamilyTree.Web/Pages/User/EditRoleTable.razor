@using AP.FamilyTree.Web.PageModels.User
@using AP.FamilyTree.Web.Data.Services.UserServices
@using AP.FamilyTree.Web.Data
@using AP.FamilyTree.Web.Globals
@inject RoleService Service
@inherits AP.FamilyTree.Web.PageModels.BaseViewModel

@if (!IsFailed)
{
    @if (!mIsItemLoaded)
    {
        <span class="spinner-border spinner-border-sm centerSpinner" role="status" aria-hidden="true"></span>
        <div class="overlay"></div>
    }
    <div>
        <MatDialog @bind-IsOpen="@ViewModel.DialogIsOpen" CanBeClosed="false">
            <EditForm Model="ViewModel.Model" OnValidSubmit="@(() => { SaveItem.InvokeAsync(ViewModel.Model); })">
                <MatDialogTitle class="diHeader">
                    <h3>@ViewModel.Model.Login</h3>
                    <div class="btn-group">
                        @if (ViewModel.IsConcurrencyError)
                        {
                            <span class="btn btn-nav btn-primary mr-1" @onclick="@(()=> ReloadItem.InvokeAsync(ViewModel.Model))">Reload</span>
                        }
                        else
                        {
                            <input type="submit" value="Сохранить" class="btn btn-nav btn-primary mr-1" style="float: right; background: darkgreen;" />
                        }
                        <span class="btn btn-nav" @onclick="@(e => {ViewModel.DialogIsOpen = false;})">X</span>
                    </div>
                    <hr />
                </MatDialogTitle>
                <MatDialogContent>
                    <DataAnnotationsValidator />
                    <div style="width: 300px; display: block; height: 100px;">
                        <div class="form-group row mb-1">
                            <label for="RoleName" class="col-2 pl-0">Роль</label>
                            <InputSelect class="form-control form-control-sm ml-0" style="width:300px;" @bind-Value="@ViewModel.Model.RoleName">
                                @foreach (var x in mRoleList)
                                    {
                                        if (ViewModel.Model.RoleName == x)
                                        {
                                        <option value="@x" selected="selected">@x</option>
                                        }
                                        else
                                        {
                                        <option value="@x">@x</option>
                                        }
                                    }
                            </InputSelect>
                            <ValidationMessage For="@(() => ViewModel.Model.RoleName)" />
                        </div>
                    </div>
                </MatDialogContent>
            </EditForm>
        </MatDialog>
    </div>
}
else
{
    <ErrorComponent Model="@ErrorModel" />
}

@code {
    [Parameter]
    public EditRoleTableViewModel ViewModel { get; set; }

    [Parameter]
    public EventCallback<RoleItemViewModel> SaveItem { get; set; }

    [Parameter]
    public EventCallback<RoleItemViewModel> ReloadItem { get; set; }

    private List<string> mRoleList = new List<string>();

    protected override Task OnInitializedAsync()
    {
        mInformationDialog.Btn = "Ок";
        SetPageName("EditRoleTable");
        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            mRoleList = await Service.GetRoles();
        }
        catch (Exception e)
        {
            ExceprionProcessing(e, FunctionModelEnum.Other, null, null, "OnParametersSetAsync");
            StateHasChanged();
        }
    }

}